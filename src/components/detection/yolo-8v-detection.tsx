"use client"
import React, {useCallback, useEffect, useRef} from 'react';
import * as ort from 'onnxruntime-web';
import {useScreenShare} from "@/lib/provider/screen-share-context";
import {UrlHistoryItem} from "@/lib/provider/gambling-context";
import {useToast} from '@/hooks/use-toast';

// ÌÉÄÏûÖ Ï†ïÏùò
type DetectionBox = [number, number, number, number, string, number];
type NotificationType = 'adult' | 'inappropriate' | 'spam';

interface PreprocessedData {
  tensor: number[];
  originalSize: {
    width: number;
    height: number;
  };
}

interface NotificationOptions {
  title: string;
  icon: string;
}

// ÏÉÅÏàò Ï†ïÏùò
const CONSTANTS = {
  MODEL_PATH: '/nude.onnx',
  CONF_THRESHOLD: 0.5,
  IOU_THRESHOLD: 0.7,
  INPUT_SIZE: 320,
  ALERT_COOLDOWN: 6000,
  DB_VERSION: 1,
  NUM_BOXES: 2100
};

// YOLO ÌÅ¥ÎûòÏä§ Ï†ïÏùò
const YOLO_CLASSES = [
  'Ïó¨ÏÑ± ÏÉùÏãùÍ∏∞ Í∞ÄÎ¶¨Í∏∞',
  'Ïó¨ÏÑ± ÏñºÍµ¥',
  'ÎëîÎ∂Ä ÎÖ∏Ï∂ú',
  'Ïó¨ÏÑ± Ïú†Î∞© ÎÖ∏Ï∂ú',
  'Ïó¨ÏÑ± ÏÉùÏãùÍ∏∞ ÎÖ∏Ï∂ú',
  'ÎÇ®ÏÑ± Ïú†Î∞© ÎÖ∏Ï∂ú',
  'Ìï≠Î¨∏ ÎÖ∏Ï∂ú',
  'Î∞ú ÎÖ∏Ï∂ú',
  'Î∞∞ Í∞ÄÎ¶¨Í∏∞',
  'Î∞ú Í∞ÄÎ¶¨Í∏∞',
  'Í≤®ÎìúÎûëÏù¥ Í∞ÄÎ¶¨Í∏∞',
  'Í≤®ÎìúÎûëÏù¥ ÎÖ∏Ï∂ú',
  'ÎÇ®ÏÑ± ÏñºÍµ¥',
  'Î∞∞ ÎÖ∏Ï∂ú',
  'ÎÇ®ÏÑ± ÏÉùÏãùÍ∏∞ ÎÖ∏Ï∂ú',
  'Ìï≠Î¨∏ Í∞ÄÎ¶¨Í∏∞',
  'Ïó¨ÏÑ± Ïú†Î∞© Í∞ÄÎ¶¨Í∏∞',
  'ÎëîÎ∂Ä Í∞ÄÎ¶¨Í∏∞'
];
// 'Ïó¨ÏÑ± ÏñºÍµ¥',

// props ÌÉÄÏûÖ Ï†ïÏùò Ï∂îÍ∞Ä
interface YOLOv8Props {
  urlHistory?: UrlHistoryItem[];
}

const YOLOv8 = ({urlHistory = []}: YOLOv8Props) => {
  const {capturedFile} = useScreenShare();
  const canvasRef = useRef<HTMLCanvasElement | null>(null);
  const modelSessionRef = useRef<ort.InferenceSession | null>(null);
  const lastAlertTimeRef = useRef<number>(0);
  const {toast} = useToast();


  // ÏïåÎ¶º Ï†ÑÏÜ°
  const sendNotification = async (type: NotificationType, message: string) => {
    const permission = await Notification.requestPermission();

    if (permission === "granted") {
      const notificationOptions: Record<NotificationType, NotificationOptions> = {
        adult: {
          title: "üö® ÏÑ±Ïù∏ ÏΩòÌÖêÏ∏† Í∞êÏßÄ",
          icon: '/meer.ico'
        },
        inappropriate: {
          title: "‚ö†Ô∏è Î∂ÄÏ†ÅÏ†à ÏΩòÌÖêÏ∏†",
          icon: '/meer.ico'
        },
        spam: {
          title: "üö´ Ïä§Ìå∏ Í∞êÏßÄ",
          icon: '/meer.ico'
        }
      };

      const options = {
        body: message,
        ...notificationOptions[type],
        tag: type,
        requireInteraction: false,
        icon: '/meer.ico'
      };

      try {
        const notification = new Notification(options.title, options);

        notification.onclick = () => {
          window.focus();
          notification.close();
        };

        setTimeout(() => notification.close(), 5000);
      } catch (error) {
        console.error('ÏïåÎ¶º ÏÉùÏÑ± Ïã§Ìå®:', error);
        showFallbackAlert(message);
      }
    } else {
      showFallbackAlert(message);
    }
  };

  // ÎåÄÏ≤¥ ÏïåÎ¶º ÌëúÏãú
  const showFallbackAlert = (message: string) => {
    const alert = document.createElement('div');
    alert.className = 'alert-message';
    alert.textContent = message;
    document.body.appendChild(alert);

    setTimeout(() => {
      alert.remove();
    }, 3000);
  };

  // DB Ï¥àÍ∏∞Ìôî
  const initializeDB = useCallback(async (dbName: string) => {
    return new Promise<IDBDatabase>((resolve, reject) => {
      const request = indexedDB.open(dbName, CONSTANTS.DB_VERSION);

      request.onerror = () => reject(request.error);
      request.onsuccess = () => resolve(request.result);

      request.onupgradeneeded = (event: IDBVersionChangeEvent) => {
        const db = (event.target as IDBOpenDBRequest).result;
        if (!db.objectStoreNames.contains("images")) {
          db.createObjectStore("images", {keyPath: "id", autoIncrement: true});
        }
      };
    });
  }, []);

  // DBÏóê Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû•
  const saveImageToDB = async (dbName: string, imageData: string) => {
    try {
      const db = await initializeDB(dbName);
      const transaction = db.transaction("images", "readwrite");
      const store = transaction.objectStore("images");

      await store.add({data: imageData});
      console.log(`Image saved to ${dbName} successfully`);
    } catch (error) {
      console.error(`Failed to save image to ${dbName}:`, error);
    }
  };

  // Î™®Îç∏ Ï¥àÍ∏∞Ìôî
  const initializeModel = useCallback(async () => {
    try {
      const options: ort.InferenceSession.SessionOptions = {
        executionProviders: ['wasm'],
        graphOptimizationLevel: 'all',
        enableCpuMemArena: true,
        enableMemPattern: true,
        executionMode: 'sequential'
      };

      const session = await ort.InferenceSession.create(CONSTANTS.MODEL_PATH, options);
      modelSessionRef.current = session;
    } catch (error) {
      console.error('Model initialization failed:', error);
    }
  }, []);

  // Ïù¥ÎØ∏ÏßÄ Ï†ÑÏ≤òÎ¶¨
  const preprocessImage = useCallback(async (file: File): Promise<PreprocessedData> => {
    return new Promise((resolve) => {
      const img = new Image();
      const url = URL.createObjectURL(file);

      img.onload = () => {
        const canvas = document.createElement('canvas');
        canvas.width = CONSTANTS.INPUT_SIZE;
        canvas.height = CONSTANTS.INPUT_SIZE;
        const ctx = canvas.getContext('2d');

        if (ctx) {
          ctx.drawImage(img, 0, 0, CONSTANTS.INPUT_SIZE, CONSTANTS.INPUT_SIZE);
          const imageData = ctx.getImageData(0, 0, CONSTANTS.INPUT_SIZE, CONSTANTS.INPUT_SIZE);
          const {data} = imageData;
          const [red, green, blue] = [new Array<number>(), new Array<number>(), new Array<number>()];

          for (let i = 0; i < data.length; i += 4) {
            red.push(data[i] / 255.0);
            green.push(data[i + 1] / 255.0);
            blue.push(data[i + 2] / 255.0);
          }

          URL.revokeObjectURL(url);
          resolve({
            tensor: [...red, ...green, ...blue],
            originalSize: {width: img.width, height: img.height}
          });
        }
      };

      img.src = url;
    });
  }, []);

  // Ï∂úÎ†• Ï≤òÎ¶¨
  const processOutputs = (output: Float32Array, imgWidth: number, imgHeight: number): DetectionBox[] => {
    let boxes: DetectionBox[] = [];

    for (let index = 0; index < 2100; index++) {
      // ÌÅ¥ÎûòÏä§ ÏàòÎ•º Ïã§Ï†ú YOLO_CLASSES Í∏∏Ïù¥Ïóê ÎßûÏ∂§
      const [classId, prob] = [...Array(YOLO_CLASSES.length).keys()]
      .map(col => [col, output[2100 * (col + 4) + index]])
      .reduce((accum, item) => item[1] > accum[1] ? item : accum, [0, 0]);

      if (prob < CONSTANTS.CONF_THRESHOLD) {
        continue;
      }

      // classIdÍ∞Ä YOLO_CLASSES Î≤îÏúÑÎ•º Î≤óÏñ¥ÎÇòÏßÄ ÏïäÎèÑÎ°ù ÌôïÏù∏
      if (classId >= YOLO_CLASSES.length) {
        continue;
      }

      const label = YOLO_CLASSES[classId];
      const xc = output[index];
      const yc = output[2100 + index];
      const w = output[2 * 2100 + index];
      const h = output[3 * 2100 + index];

      const x1 = (xc - w / 2) / 320 * imgWidth;
      const y1 = (yc - h / 2) / 320 * imgHeight;
      const x2 = (xc + w / 2) / 320 * imgWidth;
      const y2 = (yc + h / 2) / 320 * imgHeight;

      console.log(`Detection: ${label} (${prob.toFixed(3)}) at [${x1.toFixed(1)}, ${y1.toFixed(1)}, ${x2.toFixed(1)}, ${y2.toFixed(1)}]`);
      boxes.push([x1, y1, x2, y2, label, prob]);
    }

    // NMS Ï†ÅÏö©
    boxes = boxes.sort((box1, box2) => box2[5] - box1[5]);
    const result = [];

    while (boxes.length > 0) {
      result.push(boxes[0]);
      boxes = boxes.filter(box => calculateIoU(boxes[0], box) < CONSTANTS.IOU_THRESHOLD);
    }

    return result;
  };

  // NMS Íµ¨ÌòÑ
  const nonMaxSuppression = (boxes: DetectionBox[], iouThreshold: number): DetectionBox[] => {
    boxes.sort((a, b) => b[5] - a[5]);

    const selected: DetectionBox[] = [];
    const indices = new Set(boxes.map((_, idx) => idx));

    while (indices.size > 0) {
      const boxIdx = Array.from(indices)[0];
      selected.push(boxes[boxIdx]);
      indices.delete(boxIdx);

      const rest = Array.from(indices);
      for (const idx of rest) {
        if (calculateIoU(boxes[boxIdx], boxes[idx]) >= iouThreshold) {
          indices.delete(idx);
        }
      }
    }

    return selected;
  };

// IoU Í≥ÑÏÇ∞ Ìï®Ïàò ÏàòÏ†ï
  const calculateIoU = (box1: DetectionBox, box2: DetectionBox): number => {
    const [box1_x1, box1_y1, box1_x2, box1_y2] = box1;
    const [box2_x1, box2_y1, box2_x2, box2_y2] = box2;

    const x1 = Math.max(box1_x1, box2_x1);
    const y1 = Math.max(box1_y1, box2_y1);
    const x2 = Math.min(box1_x2, box2_x2);
    const y2 = Math.min(box1_y2, box2_y2);

    if (x2 < x1 || y2 < y1) return 0;

    const intersection = (x2 - x1) * (y2 - y1);
    const box1_area = (box1_x2 - box1_x1) * (box1_y2 - box1_y1);
    const box2_area = (box2_x2 - box2_x1) * (box2_y2 - box2_y1);
    const union = box1_area + box2_area - intersection;

    return intersection / union;
  };

  // Í∞ùÏ≤¥ Í∞êÏßÄ Ïã§Ìñâ
  const runDetection = useCallback(async (preprocessedData: PreprocessedData): Promise<DetectionBox[]> => {
    if (!modelSessionRef.current) return [];

    try {
      const inputTensor = new ort.Tensor(
          'float32',
          Float32Array.from(preprocessedData.tensor),
          [1, 3, CONSTANTS.INPUT_SIZE, CONSTANTS.INPUT_SIZE]
      );

      const outputs = await modelSessionRef.current.run({images: inputTensor});
      return processOutputs(
          outputs.output0.data as Float32Array,
          preprocessedData.originalSize.width,
          preprocessedData.originalSize.height
      );
    } catch (error) {
      console.error('Detection failed:', error);
      return [];
    }
  }, []);


  const initBlcokDB = async (): Promise<IDBDatabase> => {
    return new Promise((resolve, reject) => {
      const request = indexedDB.open('BlockedSitesDB', 2); // Î≤ÑÏ†ÑÏùÑ 2Î°ú Ï¶ùÍ∞Ä

      request.onerror = () => {
        console.error("DB Error:", request.error);
        reject(request.error);
      };

      request.onsuccess = () => {
        console.log("DB Opened successfully");
        resolve(request.result);
      };

      request.onupgradeneeded = (event: IDBVersionChangeEvent) => {
        console.log("Upgrading database...");
        const db = (event.target as IDBOpenDBRequest).result;

        // Í∏∞Ï°¥ Ïä§ÌÜ†Ïñ¥Í∞Ä ÏûàÎã§Î©¥ ÏÇ≠Ï†ú
        if (db.objectStoreNames.contains('blockedSites')) {
          db.deleteObjectStore('blockedSites');
        }

        // ÏÉà Ïä§ÌÜ†Ïñ¥ ÏÉùÏÑ±
        const store = db.createObjectStore('blockedSites', {
          keyPath: 'url',
          autoIncrement: false
        });

        // Ïù∏Îç±Ïä§ ÏÉùÏÑ±
        store.createIndex('blockedAt', 'blockedAt', {unique: false});
        store.createIndex('unblockTime', 'unblockTime', {unique: false});
        store.createIndex('duration', 'duration', {unique: false});

        console.log("Store created:", store);
      };
    });
  };
  const saveToBlockedSitesDB = async (url: string, duration: number) => {
    try {
      const db = await initBlcokDB();
      const transaction = db.transaction('blockedSites', 'readwrite');
      const store = transaction.objectStore('blockedSites');

      const blockedSite = {
        url,
        blockedAt: new Date(),
        unblockTime: new Date(Date.now() + duration * 60 * 1000),
        duration: duration
      };

      await store.put(blockedSite);
      console.log('Site saved to BlockedSitesDB:', blockedSite);
    } catch (error) {
      console.error('Error saving to BlockedSitesDB:', error);
    }
  };
  // Î©îÏãúÏßÄ Ï≤òÎ¶¨
  const handleMessage = async () => {
    // Ïø®Îã§Ïö¥ Ï≤¥ÌÅ¨
    if (Date.now() - lastAlertTimeRef.current <= CONSTANTS.ALERT_COOLDOWN) {
      console.log('Ïø®Îã§Ïö¥ Ï§ëÏûÖÎãàÎã§.');
      return;
    }

    if (!urlHistory || urlHistory.length === 0) return;

    const currentUrl = urlHistory[0]?.url;
    if (!currentUrl) return;

    // Ï∞®Îã® Î©îÏãúÏßÄ Ï†ÑÏÜ°
    window.postMessage(
        {
          type: "block",
          source: "block",
          identifier: 'URL_HISTORY_TRACKER_f7e8d9c6b5a4',
          data: currentUrl,
          duration: '1'
        },
        "*"
    );

    try {
      await saveToBlockedSitesDB(currentUrl, 1); // 10Î∂Ñ Ï∞®Îã®

      // ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï≤òÎ¶¨Îêú Í≤ΩÏö∞ÏóêÎßå ÏïåÎ¶º Ï†ÑÏÜ° Î∞è Ïø®Îã§Ïö¥ ÏãúÏûë
      sendNotification('adult', 'ÏÑ±Ïù∏ ÏΩòÌÖêÏ∏†Í∞Ä Í∞êÏßÄÎêòÏóàÏäµÎãàÎã§.');
      lastAlertTimeRef.current = Date.now();
      console.log('Ï∞®Îã® Ï≤òÎ¶¨ ÏôÑÎ£å:', currentUrl);
    } catch (error) {
      console.error('Error saving to BlockedSitesDB:', error);
    }
  };

  // Í≤∞Í≥º Ï≤òÎ¶¨ Î∞è Î∞ïÏä§ Í∑∏Î¶¨Í∏∞
  const drawDetections = useCallback(async (canvas: HTMLCanvasElement, image: File, boxes: DetectionBox[]) => {
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    const img = new Image();

    img.onload = () => {
      canvas.width = img.width;
      canvas.height = img.height;
      ctx.drawImage(img, 0, 0);

      let detectionFound = false;
      let detectedLabels: string[] = [];

      boxes.forEach(box => {
        const [x1, y1, x2, y2, label, confidence] = box;

        // Î∞ïÏä§ Í∑∏Î¶¨Í∏∞
        ctx.strokeStyle = "#00FF00";
        ctx.lineWidth = 3;
        ctx.strokeRect(x1, y1, x2 - x1, y2 - y1);

        // Î†àÏù¥Î∏î Í∑∏Î¶¨Í∏∞
        ctx.fillStyle = "#00FF00";
        ctx.font = "18px serif";
        const text = `${label} ${Math.round(confidence * 100)}%`;
        const textWidth = ctx.measureText(text).width;

        ctx.fillRect(x1, y1 - 25, textWidth + 10, 25);
        ctx.fillStyle = "#000000";
        ctx.fillText(text, x1 + 5, y1 - 5);

        detectionFound = true;
        detectedLabels.push(`${label} (${Math.round(confidence * 100)}%)`);
      });

      // Í∞êÏßÄÎêú Í≤ΩÏö∞ÏóêÎßå handleMessage Ìò∏Ï∂ú
      if (detectionFound) {
        const newImageData = canvas.toDataURL('image/png');
        saveImageToDB('DetectionImageDB', newImageData);

        // Ïø®Îã§Ïö¥ Ï≤¥ÌÅ¨Î•º handleMessage ÎÇ¥Î∂ÄÎ°ú Ïù¥Îèô
        handleMessage();
        console.log('Í∞êÏßÄÎêú Í∞ùÏ≤¥Îì§:', detectedLabels.join(', '));
      }

      URL.revokeObjectURL(img.src);
    };

    img.src = URL.createObjectURL(image);
  }, [handleMessage]); // handleMessageÎ•º ÏùòÏ°¥ÏÑ± Î∞∞Ïó¥Ïóê Ï∂îÍ∞Ä


  // ÏÉà Ïù¥ÎØ∏ÏßÄ Ï≤òÎ¶¨
  const handleNewImage = async (file: File) => {
    try {
      const preprocessedData = await preprocessImage(file);
      const detections = await runDetection(preprocessedData);

      if (canvasRef.current) {
        await drawDetections(canvasRef.current as HTMLCanvasElement, file, detections);
      }
    } catch (error) {
      console.error('Image processing failed:', error);
    }
  };

  // Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    initializeModel();
    initializeDB('DetectionImageDB');
  }, [initializeModel, initializeDB]);

  // ÌååÏùº Î≥ÄÍ≤Ω Í∞êÏßÄ
  useEffect(() => {
    if (capturedFile) {
      handleNewImage(capturedFile);

    }

  }, [capturedFile, handleNewImage]);

  return (
      <>
        <div className="w-full h-full flex flex-col items-center">
          <canvas
              ref={canvasRef}
              hidden
              className="w-full h-full object-contain mt-2.5"
          />
        </div>
      </>
  );
};

export default YOLOv8